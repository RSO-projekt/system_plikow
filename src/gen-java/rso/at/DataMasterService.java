/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rso.at;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DataMasterService {

  public interface Iface {

    public void transactionFinished(rso.at.Transaction transaction, boolean isSuccessful) throws rso.at.InvalidOperation, org.apache.thrift.TException;

    public List<rso.at.FileEntryExtended> getMirroredFileList() throws rso.at.InvalidOperation, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void transactionFinished(rso.at.Transaction transaction, boolean isSuccessful, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMirroredFileList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void transactionFinished(rso.at.Transaction transaction, boolean isSuccessful) throws rso.at.InvalidOperation, org.apache.thrift.TException
    {
      send_transactionFinished(transaction, isSuccessful);
      recv_transactionFinished();
    }

    public void send_transactionFinished(rso.at.Transaction transaction, boolean isSuccessful) throws org.apache.thrift.TException
    {
      transactionFinished_args args = new transactionFinished_args();
      args.setTransaction(transaction);
      args.setIsSuccessful(isSuccessful);
      sendBase("transactionFinished", args);
    }

    public void recv_transactionFinished() throws rso.at.InvalidOperation, org.apache.thrift.TException
    {
      transactionFinished_result result = new transactionFinished_result();
      receiveBase(result, "transactionFinished");
      if (result.err1 != null) {
        throw result.err1;
      }
      return;
    }

    public List<rso.at.FileEntryExtended> getMirroredFileList() throws rso.at.InvalidOperation, org.apache.thrift.TException
    {
      send_getMirroredFileList();
      return recv_getMirroredFileList();
    }

    public void send_getMirroredFileList() throws org.apache.thrift.TException
    {
      getMirroredFileList_args args = new getMirroredFileList_args();
      sendBase("getMirroredFileList", args);
    }

    public List<rso.at.FileEntryExtended> recv_getMirroredFileList() throws rso.at.InvalidOperation, org.apache.thrift.TException
    {
      getMirroredFileList_result result = new getMirroredFileList_result();
      receiveBase(result, "getMirroredFileList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err1 != null) {
        throw result.err1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMirroredFileList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void transactionFinished(rso.at.Transaction transaction, boolean isSuccessful, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      transactionFinished_call method_call = new transactionFinished_call(transaction, isSuccessful, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class transactionFinished_call extends org.apache.thrift.async.TAsyncMethodCall {
      private rso.at.Transaction transaction;
      private boolean isSuccessful;
      public transactionFinished_call(rso.at.Transaction transaction, boolean isSuccessful, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transaction = transaction;
        this.isSuccessful = isSuccessful;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("transactionFinished", org.apache.thrift.protocol.TMessageType.CALL, 0));
        transactionFinished_args args = new transactionFinished_args();
        args.setTransaction(transaction);
        args.setIsSuccessful(isSuccessful);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws rso.at.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_transactionFinished();
      }
    }

    public void getMirroredFileList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMirroredFileList_call method_call = new getMirroredFileList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMirroredFileList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getMirroredFileList_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMirroredFileList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMirroredFileList_args args = new getMirroredFileList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<rso.at.FileEntryExtended> getResult() throws rso.at.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMirroredFileList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("transactionFinished", new transactionFinished());
      processMap.put("getMirroredFileList", new getMirroredFileList());
      return processMap;
    }

    public static class transactionFinished<I extends Iface> extends org.apache.thrift.ProcessFunction<I, transactionFinished_args> {
      public transactionFinished() {
        super("transactionFinished");
      }

      public transactionFinished_args getEmptyArgsInstance() {
        return new transactionFinished_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public transactionFinished_result getResult(I iface, transactionFinished_args args) throws org.apache.thrift.TException {
        transactionFinished_result result = new transactionFinished_result();
        try {
          iface.transactionFinished(args.transaction, args.isSuccessful);
        } catch (rso.at.InvalidOperation err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

    public static class getMirroredFileList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMirroredFileList_args> {
      public getMirroredFileList() {
        super("getMirroredFileList");
      }

      public getMirroredFileList_args getEmptyArgsInstance() {
        return new getMirroredFileList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMirroredFileList_result getResult(I iface, getMirroredFileList_args args) throws org.apache.thrift.TException {
        getMirroredFileList_result result = new getMirroredFileList_result();
        try {
          result.success = iface.getMirroredFileList();
        } catch (rso.at.InvalidOperation err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("transactionFinished", new transactionFinished());
      processMap.put("getMirroredFileList", new getMirroredFileList());
      return processMap;
    }

    public static class transactionFinished<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, transactionFinished_args, Void> {
      public transactionFinished() {
        super("transactionFinished");
      }

      public transactionFinished_args getEmptyArgsInstance() {
        return new transactionFinished_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            transactionFinished_result result = new transactionFinished_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            transactionFinished_result result = new transactionFinished_result();
            if (e instanceof rso.at.InvalidOperation) {
                        result.err1 = (rso.at.InvalidOperation) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, transactionFinished_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.transactionFinished(args.transaction, args.isSuccessful,resultHandler);
      }
    }

    public static class getMirroredFileList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMirroredFileList_args, List<rso.at.FileEntryExtended>> {
      public getMirroredFileList() {
        super("getMirroredFileList");
      }

      public getMirroredFileList_args getEmptyArgsInstance() {
        return new getMirroredFileList_args();
      }

      public AsyncMethodCallback<List<rso.at.FileEntryExtended>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<rso.at.FileEntryExtended>>() { 
          public void onComplete(List<rso.at.FileEntryExtended> o) {
            getMirroredFileList_result result = new getMirroredFileList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMirroredFileList_result result = new getMirroredFileList_result();
            if (e instanceof rso.at.InvalidOperation) {
                        result.err1 = (rso.at.InvalidOperation) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMirroredFileList_args args, org.apache.thrift.async.AsyncMethodCallback<List<rso.at.FileEntryExtended>> resultHandler) throws TException {
        iface.getMirroredFileList(resultHandler);
      }
    }

  }

  public static class transactionFinished_args implements org.apache.thrift.TBase<transactionFinished_args, transactionFinished_args._Fields>, java.io.Serializable, Cloneable, Comparable<transactionFinished_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transactionFinished_args");

    private static final org.apache.thrift.protocol.TField TRANSACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("transaction", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IS_SUCCESSFUL_FIELD_DESC = new org.apache.thrift.protocol.TField("isSuccessful", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transactionFinished_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transactionFinished_argsTupleSchemeFactory());
    }

    public rso.at.Transaction transaction; // required
    public boolean isSuccessful; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSACTION((short)1, "transaction"),
      IS_SUCCESSFUL((short)2, "isSuccessful");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSACTION
            return TRANSACTION;
          case 2: // IS_SUCCESSFUL
            return IS_SUCCESSFUL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISSUCCESSFUL_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSACTION, new org.apache.thrift.meta_data.FieldMetaData("transaction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rso.at.Transaction.class)));
      tmpMap.put(_Fields.IS_SUCCESSFUL, new org.apache.thrift.meta_data.FieldMetaData("isSuccessful", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transactionFinished_args.class, metaDataMap);
    }

    public transactionFinished_args() {
    }

    public transactionFinished_args(
      rso.at.Transaction transaction,
      boolean isSuccessful)
    {
      this();
      this.transaction = transaction;
      this.isSuccessful = isSuccessful;
      setIsSuccessfulIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transactionFinished_args(transactionFinished_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransaction()) {
        this.transaction = new rso.at.Transaction(other.transaction);
      }
      this.isSuccessful = other.isSuccessful;
    }

    public transactionFinished_args deepCopy() {
      return new transactionFinished_args(this);
    }

    @Override
    public void clear() {
      this.transaction = null;
      setIsSuccessfulIsSet(false);
      this.isSuccessful = false;
    }

    public rso.at.Transaction getTransaction() {
      return this.transaction;
    }

    public transactionFinished_args setTransaction(rso.at.Transaction transaction) {
      this.transaction = transaction;
      return this;
    }

    public void unsetTransaction() {
      this.transaction = null;
    }

    /** Returns true if field transaction is set (has been assigned a value) and false otherwise */
    public boolean isSetTransaction() {
      return this.transaction != null;
    }

    public void setTransactionIsSet(boolean value) {
      if (!value) {
        this.transaction = null;
      }
    }

    public boolean isIsSuccessful() {
      return this.isSuccessful;
    }

    public transactionFinished_args setIsSuccessful(boolean isSuccessful) {
      this.isSuccessful = isSuccessful;
      setIsSuccessfulIsSet(true);
      return this;
    }

    public void unsetIsSuccessful() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSUCCESSFUL_ISSET_ID);
    }

    /** Returns true if field isSuccessful is set (has been assigned a value) and false otherwise */
    public boolean isSetIsSuccessful() {
      return EncodingUtils.testBit(__isset_bitfield, __ISSUCCESSFUL_ISSET_ID);
    }

    public void setIsSuccessfulIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSUCCESSFUL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANSACTION:
        if (value == null) {
          unsetTransaction();
        } else {
          setTransaction((rso.at.Transaction)value);
        }
        break;

      case IS_SUCCESSFUL:
        if (value == null) {
          unsetIsSuccessful();
        } else {
          setIsSuccessful((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSACTION:
        return getTransaction();

      case IS_SUCCESSFUL:
        return Boolean.valueOf(isIsSuccessful());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANSACTION:
        return isSetTransaction();
      case IS_SUCCESSFUL:
        return isSetIsSuccessful();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transactionFinished_args)
        return this.equals((transactionFinished_args)that);
      return false;
    }

    public boolean equals(transactionFinished_args that) {
      if (that == null)
        return false;

      boolean this_present_transaction = true && this.isSetTransaction();
      boolean that_present_transaction = true && that.isSetTransaction();
      if (this_present_transaction || that_present_transaction) {
        if (!(this_present_transaction && that_present_transaction))
          return false;
        if (!this.transaction.equals(that.transaction))
          return false;
      }

      boolean this_present_isSuccessful = true;
      boolean that_present_isSuccessful = true;
      if (this_present_isSuccessful || that_present_isSuccessful) {
        if (!(this_present_isSuccessful && that_present_isSuccessful))
          return false;
        if (this.isSuccessful != that.isSuccessful)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(transactionFinished_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransaction()).compareTo(other.isSetTransaction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransaction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transaction, other.transaction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsSuccessful()).compareTo(other.isSetIsSuccessful());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsSuccessful()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSuccessful, other.isSuccessful);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transactionFinished_args(");
      boolean first = true;

      sb.append("transaction:");
      if (this.transaction == null) {
        sb.append("null");
      } else {
        sb.append(this.transaction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isSuccessful:");
      sb.append(this.isSuccessful);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (transaction != null) {
        transaction.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transactionFinished_argsStandardSchemeFactory implements SchemeFactory {
      public transactionFinished_argsStandardScheme getScheme() {
        return new transactionFinished_argsStandardScheme();
      }
    }

    private static class transactionFinished_argsStandardScheme extends StandardScheme<transactionFinished_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transactionFinished_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transaction = new rso.at.Transaction();
                struct.transaction.read(iprot);
                struct.setTransactionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_SUCCESSFUL
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isSuccessful = iprot.readBool();
                struct.setIsSuccessfulIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transactionFinished_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transaction != null) {
          oprot.writeFieldBegin(TRANSACTION_FIELD_DESC);
          struct.transaction.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_SUCCESSFUL_FIELD_DESC);
        oprot.writeBool(struct.isSuccessful);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transactionFinished_argsTupleSchemeFactory implements SchemeFactory {
      public transactionFinished_argsTupleScheme getScheme() {
        return new transactionFinished_argsTupleScheme();
      }
    }

    private static class transactionFinished_argsTupleScheme extends TupleScheme<transactionFinished_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transactionFinished_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransaction()) {
          optionals.set(0);
        }
        if (struct.isSetIsSuccessful()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTransaction()) {
          struct.transaction.write(oprot);
        }
        if (struct.isSetIsSuccessful()) {
          oprot.writeBool(struct.isSuccessful);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transactionFinished_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.transaction = new rso.at.Transaction();
          struct.transaction.read(iprot);
          struct.setTransactionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isSuccessful = iprot.readBool();
          struct.setIsSuccessfulIsSet(true);
        }
      }
    }

  }

  public static class transactionFinished_result implements org.apache.thrift.TBase<transactionFinished_result, transactionFinished_result._Fields>, java.io.Serializable, Cloneable, Comparable<transactionFinished_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transactionFinished_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transactionFinished_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transactionFinished_resultTupleSchemeFactory());
    }

    public rso.at.InvalidOperation err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transactionFinished_result.class, metaDataMap);
    }

    public transactionFinished_result() {
    }

    public transactionFinished_result(
      rso.at.InvalidOperation err1)
    {
      this();
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transactionFinished_result(transactionFinished_result other) {
      if (other.isSetErr1()) {
        this.err1 = new rso.at.InvalidOperation(other.err1);
      }
    }

    public transactionFinished_result deepCopy() {
      return new transactionFinished_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
    }

    public rso.at.InvalidOperation getErr1() {
      return this.err1;
    }

    public transactionFinished_result setErr1(rso.at.InvalidOperation err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((rso.at.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transactionFinished_result)
        return this.equals((transactionFinished_result)that);
      return false;
    }

    public boolean equals(transactionFinished_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(transactionFinished_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transactionFinished_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transactionFinished_resultStandardSchemeFactory implements SchemeFactory {
      public transactionFinished_resultStandardScheme getScheme() {
        return new transactionFinished_resultStandardScheme();
      }
    }

    private static class transactionFinished_resultStandardScheme extends StandardScheme<transactionFinished_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transactionFinished_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new rso.at.InvalidOperation();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transactionFinished_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transactionFinished_resultTupleSchemeFactory implements SchemeFactory {
      public transactionFinished_resultTupleScheme getScheme() {
        return new transactionFinished_resultTupleScheme();
      }
    }

    private static class transactionFinished_resultTupleScheme extends TupleScheme<transactionFinished_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transactionFinished_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transactionFinished_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err1 = new rso.at.InvalidOperation();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

  public static class getMirroredFileList_args implements org.apache.thrift.TBase<getMirroredFileList_args, getMirroredFileList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMirroredFileList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMirroredFileList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMirroredFileList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMirroredFileList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMirroredFileList_args.class, metaDataMap);
    }

    public getMirroredFileList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMirroredFileList_args(getMirroredFileList_args other) {
    }

    public getMirroredFileList_args deepCopy() {
      return new getMirroredFileList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMirroredFileList_args)
        return this.equals((getMirroredFileList_args)that);
      return false;
    }

    public boolean equals(getMirroredFileList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMirroredFileList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMirroredFileList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMirroredFileList_argsStandardSchemeFactory implements SchemeFactory {
      public getMirroredFileList_argsStandardScheme getScheme() {
        return new getMirroredFileList_argsStandardScheme();
      }
    }

    private static class getMirroredFileList_argsStandardScheme extends StandardScheme<getMirroredFileList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMirroredFileList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMirroredFileList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMirroredFileList_argsTupleSchemeFactory implements SchemeFactory {
      public getMirroredFileList_argsTupleScheme getScheme() {
        return new getMirroredFileList_argsTupleScheme();
      }
    }

    private static class getMirroredFileList_argsTupleScheme extends TupleScheme<getMirroredFileList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMirroredFileList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMirroredFileList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getMirroredFileList_result implements org.apache.thrift.TBase<getMirroredFileList_result, getMirroredFileList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMirroredFileList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMirroredFileList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMirroredFileList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMirroredFileList_resultTupleSchemeFactory());
    }

    public List<rso.at.FileEntryExtended> success; // required
    public rso.at.InvalidOperation err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rso.at.FileEntryExtended.class))));
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMirroredFileList_result.class, metaDataMap);
    }

    public getMirroredFileList_result() {
    }

    public getMirroredFileList_result(
      List<rso.at.FileEntryExtended> success,
      rso.at.InvalidOperation err1)
    {
      this();
      this.success = success;
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMirroredFileList_result(getMirroredFileList_result other) {
      if (other.isSetSuccess()) {
        List<rso.at.FileEntryExtended> __this__success = new ArrayList<rso.at.FileEntryExtended>(other.success.size());
        for (rso.at.FileEntryExtended other_element : other.success) {
          __this__success.add(new rso.at.FileEntryExtended(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr1()) {
        this.err1 = new rso.at.InvalidOperation(other.err1);
      }
    }

    public getMirroredFileList_result deepCopy() {
      return new getMirroredFileList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<rso.at.FileEntryExtended> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(rso.at.FileEntryExtended elem) {
      if (this.success == null) {
        this.success = new ArrayList<rso.at.FileEntryExtended>();
      }
      this.success.add(elem);
    }

    public List<rso.at.FileEntryExtended> getSuccess() {
      return this.success;
    }

    public getMirroredFileList_result setSuccess(List<rso.at.FileEntryExtended> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public rso.at.InvalidOperation getErr1() {
      return this.err1;
    }

    public getMirroredFileList_result setErr1(rso.at.InvalidOperation err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<rso.at.FileEntryExtended>)value);
        }
        break;

      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((rso.at.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMirroredFileList_result)
        return this.equals((getMirroredFileList_result)that);
      return false;
    }

    public boolean equals(getMirroredFileList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMirroredFileList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMirroredFileList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMirroredFileList_resultStandardSchemeFactory implements SchemeFactory {
      public getMirroredFileList_resultStandardScheme getScheme() {
        return new getMirroredFileList_resultStandardScheme();
      }
    }

    private static class getMirroredFileList_resultStandardScheme extends StandardScheme<getMirroredFileList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMirroredFileList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<rso.at.FileEntryExtended>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    rso.at.FileEntryExtended _elem2;
                    _elem2 = new rso.at.FileEntryExtended();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new rso.at.InvalidOperation();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMirroredFileList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (rso.at.FileEntryExtended _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMirroredFileList_resultTupleSchemeFactory implements SchemeFactory {
      public getMirroredFileList_resultTupleScheme getScheme() {
        return new getMirroredFileList_resultTupleScheme();
      }
    }

    private static class getMirroredFileList_resultTupleScheme extends TupleScheme<getMirroredFileList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMirroredFileList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (rso.at.FileEntryExtended _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMirroredFileList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<rso.at.FileEntryExtended>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              rso.at.FileEntryExtended _elem7;
              _elem7 = new rso.at.FileEntryExtended();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err1 = new rso.at.InvalidOperation();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

}
