/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rso.at;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MasterMasterService {

  public interface Iface {

    public void updateCreateEntry(int serverID, long fsVersion, rso.at.FileEntryExtended entry) throws org.apache.thrift.TException;

    public void updateRemoveEntry(int serverID, long fsVersion, rso.at.FileEntryExtended entry) throws org.apache.thrift.TException;

    public void updateMoveEntry(int serverID, long fsVersion, rso.at.FileEntryExtended oldEntry, rso.at.FileEntryExtended newEntry) throws org.apache.thrift.TException;

    public rso.at.FileSystemSnapshot getFileSystemSnapshot(int serverID) throws rso.at.HostNotPermitted, org.apache.thrift.TException;

    public long election(int serverID) throws org.apache.thrift.TException;

    public long elected(int serverID) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void updateCreateEntry(int serverID, long fsVersion, rso.at.FileEntryExtended entry, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateRemoveEntry(int serverID, long fsVersion, rso.at.FileEntryExtended entry, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateMoveEntry(int serverID, long fsVersion, rso.at.FileEntryExtended oldEntry, rso.at.FileEntryExtended newEntry, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFileSystemSnapshot(int serverID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void election(int serverID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void elected(int serverID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void updateCreateEntry(int serverID, long fsVersion, rso.at.FileEntryExtended entry) throws org.apache.thrift.TException
    {
      send_updateCreateEntry(serverID, fsVersion, entry);
    }

    public void send_updateCreateEntry(int serverID, long fsVersion, rso.at.FileEntryExtended entry) throws org.apache.thrift.TException
    {
      updateCreateEntry_args args = new updateCreateEntry_args();
      args.setServerID(serverID);
      args.setFsVersion(fsVersion);
      args.setEntry(entry);
      sendBase("updateCreateEntry", args);
    }

    public void updateRemoveEntry(int serverID, long fsVersion, rso.at.FileEntryExtended entry) throws org.apache.thrift.TException
    {
      send_updateRemoveEntry(serverID, fsVersion, entry);
    }

    public void send_updateRemoveEntry(int serverID, long fsVersion, rso.at.FileEntryExtended entry) throws org.apache.thrift.TException
    {
      updateRemoveEntry_args args = new updateRemoveEntry_args();
      args.setServerID(serverID);
      args.setFsVersion(fsVersion);
      args.setEntry(entry);
      sendBase("updateRemoveEntry", args);
    }

    public void updateMoveEntry(int serverID, long fsVersion, rso.at.FileEntryExtended oldEntry, rso.at.FileEntryExtended newEntry) throws org.apache.thrift.TException
    {
      send_updateMoveEntry(serverID, fsVersion, oldEntry, newEntry);
    }

    public void send_updateMoveEntry(int serverID, long fsVersion, rso.at.FileEntryExtended oldEntry, rso.at.FileEntryExtended newEntry) throws org.apache.thrift.TException
    {
      updateMoveEntry_args args = new updateMoveEntry_args();
      args.setServerID(serverID);
      args.setFsVersion(fsVersion);
      args.setOldEntry(oldEntry);
      args.setNewEntry(newEntry);
      sendBase("updateMoveEntry", args);
    }

    public rso.at.FileSystemSnapshot getFileSystemSnapshot(int serverID) throws rso.at.HostNotPermitted, org.apache.thrift.TException
    {
      send_getFileSystemSnapshot(serverID);
      return recv_getFileSystemSnapshot();
    }

    public void send_getFileSystemSnapshot(int serverID) throws org.apache.thrift.TException
    {
      getFileSystemSnapshot_args args = new getFileSystemSnapshot_args();
      args.setServerID(serverID);
      sendBase("getFileSystemSnapshot", args);
    }

    public rso.at.FileSystemSnapshot recv_getFileSystemSnapshot() throws rso.at.HostNotPermitted, org.apache.thrift.TException
    {
      getFileSystemSnapshot_result result = new getFileSystemSnapshot_result();
      receiveBase(result, "getFileSystemSnapshot");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFileSystemSnapshot failed: unknown result");
    }

    public long election(int serverID) throws org.apache.thrift.TException
    {
      send_election(serverID);
      return recv_election();
    }

    public void send_election(int serverID) throws org.apache.thrift.TException
    {
      election_args args = new election_args();
      args.setServerID(serverID);
      sendBase("election", args);
    }

    public long recv_election() throws org.apache.thrift.TException
    {
      election_result result = new election_result();
      receiveBase(result, "election");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "election failed: unknown result");
    }

    public long elected(int serverID) throws org.apache.thrift.TException
    {
      send_elected(serverID);
      return recv_elected();
    }

    public void send_elected(int serverID) throws org.apache.thrift.TException
    {
      elected_args args = new elected_args();
      args.setServerID(serverID);
      sendBase("elected", args);
    }

    public long recv_elected() throws org.apache.thrift.TException
    {
      elected_result result = new elected_result();
      receiveBase(result, "elected");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "elected failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void updateCreateEntry(int serverID, long fsVersion, rso.at.FileEntryExtended entry, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCreateEntry_call method_call = new updateCreateEntry_call(serverID, fsVersion, entry, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCreateEntry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int serverID;
      private long fsVersion;
      private rso.at.FileEntryExtended entry;
      public updateCreateEntry_call(int serverID, long fsVersion, rso.at.FileEntryExtended entry, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.serverID = serverID;
        this.fsVersion = fsVersion;
        this.entry = entry;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCreateEntry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCreateEntry_args args = new updateCreateEntry_args();
        args.setServerID(serverID);
        args.setFsVersion(fsVersion);
        args.setEntry(entry);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void updateRemoveEntry(int serverID, long fsVersion, rso.at.FileEntryExtended entry, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRemoveEntry_call method_call = new updateRemoveEntry_call(serverID, fsVersion, entry, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRemoveEntry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int serverID;
      private long fsVersion;
      private rso.at.FileEntryExtended entry;
      public updateRemoveEntry_call(int serverID, long fsVersion, rso.at.FileEntryExtended entry, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.serverID = serverID;
        this.fsVersion = fsVersion;
        this.entry = entry;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRemoveEntry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRemoveEntry_args args = new updateRemoveEntry_args();
        args.setServerID(serverID);
        args.setFsVersion(fsVersion);
        args.setEntry(entry);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void updateMoveEntry(int serverID, long fsVersion, rso.at.FileEntryExtended oldEntry, rso.at.FileEntryExtended newEntry, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMoveEntry_call method_call = new updateMoveEntry_call(serverID, fsVersion, oldEntry, newEntry, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMoveEntry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int serverID;
      private long fsVersion;
      private rso.at.FileEntryExtended oldEntry;
      private rso.at.FileEntryExtended newEntry;
      public updateMoveEntry_call(int serverID, long fsVersion, rso.at.FileEntryExtended oldEntry, rso.at.FileEntryExtended newEntry, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.serverID = serverID;
        this.fsVersion = fsVersion;
        this.oldEntry = oldEntry;
        this.newEntry = newEntry;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMoveEntry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMoveEntry_args args = new updateMoveEntry_args();
        args.setServerID(serverID);
        args.setFsVersion(fsVersion);
        args.setOldEntry(oldEntry);
        args.setNewEntry(newEntry);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void getFileSystemSnapshot(int serverID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFileSystemSnapshot_call method_call = new getFileSystemSnapshot_call(serverID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFileSystemSnapshot_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int serverID;
      public getFileSystemSnapshot_call(int serverID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverID = serverID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFileSystemSnapshot", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFileSystemSnapshot_args args = new getFileSystemSnapshot_args();
        args.setServerID(serverID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public rso.at.FileSystemSnapshot getResult() throws rso.at.HostNotPermitted, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFileSystemSnapshot();
      }
    }

    public void election(int serverID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      election_call method_call = new election_call(serverID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class election_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int serverID;
      public election_call(int serverID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverID = serverID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("election", org.apache.thrift.protocol.TMessageType.CALL, 0));
        election_args args = new election_args();
        args.setServerID(serverID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_election();
      }
    }

    public void elected(int serverID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      elected_call method_call = new elected_call(serverID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class elected_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int serverID;
      public elected_call(int serverID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverID = serverID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("elected", org.apache.thrift.protocol.TMessageType.CALL, 0));
        elected_args args = new elected_args();
        args.setServerID(serverID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_elected();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("updateCreateEntry", new updateCreateEntry());
      processMap.put("updateRemoveEntry", new updateRemoveEntry());
      processMap.put("updateMoveEntry", new updateMoveEntry());
      processMap.put("getFileSystemSnapshot", new getFileSystemSnapshot());
      processMap.put("election", new election());
      processMap.put("elected", new elected());
      return processMap;
    }

    public static class updateCreateEntry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCreateEntry_args> {
      public updateCreateEntry() {
        super("updateCreateEntry");
      }

      public updateCreateEntry_args getEmptyArgsInstance() {
        return new updateCreateEntry_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, updateCreateEntry_args args) throws org.apache.thrift.TException {
        iface.updateCreateEntry(args.serverID, args.fsVersion, args.entry);
        return null;
      }
    }

    public static class updateRemoveEntry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRemoveEntry_args> {
      public updateRemoveEntry() {
        super("updateRemoveEntry");
      }

      public updateRemoveEntry_args getEmptyArgsInstance() {
        return new updateRemoveEntry_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, updateRemoveEntry_args args) throws org.apache.thrift.TException {
        iface.updateRemoveEntry(args.serverID, args.fsVersion, args.entry);
        return null;
      }
    }

    public static class updateMoveEntry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMoveEntry_args> {
      public updateMoveEntry() {
        super("updateMoveEntry");
      }

      public updateMoveEntry_args getEmptyArgsInstance() {
        return new updateMoveEntry_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, updateMoveEntry_args args) throws org.apache.thrift.TException {
        iface.updateMoveEntry(args.serverID, args.fsVersion, args.oldEntry, args.newEntry);
        return null;
      }
    }

    public static class getFileSystemSnapshot<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFileSystemSnapshot_args> {
      public getFileSystemSnapshot() {
        super("getFileSystemSnapshot");
      }

      public getFileSystemSnapshot_args getEmptyArgsInstance() {
        return new getFileSystemSnapshot_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFileSystemSnapshot_result getResult(I iface, getFileSystemSnapshot_args args) throws org.apache.thrift.TException {
        getFileSystemSnapshot_result result = new getFileSystemSnapshot_result();
        try {
          result.success = iface.getFileSystemSnapshot(args.serverID);
        } catch (rso.at.HostNotPermitted err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class election<I extends Iface> extends org.apache.thrift.ProcessFunction<I, election_args> {
      public election() {
        super("election");
      }

      public election_args getEmptyArgsInstance() {
        return new election_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public election_result getResult(I iface, election_args args) throws org.apache.thrift.TException {
        election_result result = new election_result();
        result.success = iface.election(args.serverID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class elected<I extends Iface> extends org.apache.thrift.ProcessFunction<I, elected_args> {
      public elected() {
        super("elected");
      }

      public elected_args getEmptyArgsInstance() {
        return new elected_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public elected_result getResult(I iface, elected_args args) throws org.apache.thrift.TException {
        elected_result result = new elected_result();
        result.success = iface.elected(args.serverID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("updateCreateEntry", new updateCreateEntry());
      processMap.put("updateRemoveEntry", new updateRemoveEntry());
      processMap.put("updateMoveEntry", new updateMoveEntry());
      processMap.put("getFileSystemSnapshot", new getFileSystemSnapshot());
      processMap.put("election", new election());
      processMap.put("elected", new elected());
      return processMap;
    }

    public static class updateCreateEntry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCreateEntry_args, Void> {
      public updateCreateEntry() {
        super("updateCreateEntry");
      }

      public updateCreateEntry_args getEmptyArgsInstance() {
        return new updateCreateEntry_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, updateCreateEntry_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateCreateEntry(args.serverID, args.fsVersion, args.entry,resultHandler);
      }
    }

    public static class updateRemoveEntry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateRemoveEntry_args, Void> {
      public updateRemoveEntry() {
        super("updateRemoveEntry");
      }

      public updateRemoveEntry_args getEmptyArgsInstance() {
        return new updateRemoveEntry_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, updateRemoveEntry_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateRemoveEntry(args.serverID, args.fsVersion, args.entry,resultHandler);
      }
    }

    public static class updateMoveEntry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMoveEntry_args, Void> {
      public updateMoveEntry() {
        super("updateMoveEntry");
      }

      public updateMoveEntry_args getEmptyArgsInstance() {
        return new updateMoveEntry_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, updateMoveEntry_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateMoveEntry(args.serverID, args.fsVersion, args.oldEntry, args.newEntry,resultHandler);
      }
    }

    public static class getFileSystemSnapshot<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFileSystemSnapshot_args, rso.at.FileSystemSnapshot> {
      public getFileSystemSnapshot() {
        super("getFileSystemSnapshot");
      }

      public getFileSystemSnapshot_args getEmptyArgsInstance() {
        return new getFileSystemSnapshot_args();
      }

      public AsyncMethodCallback<rso.at.FileSystemSnapshot> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<rso.at.FileSystemSnapshot>() { 
          public void onComplete(rso.at.FileSystemSnapshot o) {
            getFileSystemSnapshot_result result = new getFileSystemSnapshot_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFileSystemSnapshot_result result = new getFileSystemSnapshot_result();
            if (e instanceof rso.at.HostNotPermitted) {
                        result.err = (rso.at.HostNotPermitted) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFileSystemSnapshot_args args, org.apache.thrift.async.AsyncMethodCallback<rso.at.FileSystemSnapshot> resultHandler) throws TException {
        iface.getFileSystemSnapshot(args.serverID,resultHandler);
      }
    }

    public static class election<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, election_args, Long> {
      public election() {
        super("election");
      }

      public election_args getEmptyArgsInstance() {
        return new election_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            election_result result = new election_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            election_result result = new election_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, election_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.election(args.serverID,resultHandler);
      }
    }

    public static class elected<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, elected_args, Long> {
      public elected() {
        super("elected");
      }

      public elected_args getEmptyArgsInstance() {
        return new elected_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            elected_result result = new elected_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            elected_result result = new elected_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, elected_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.elected(args.serverID,resultHandler);
      }
    }

  }

  public static class updateCreateEntry_args implements org.apache.thrift.TBase<updateCreateEntry_args, updateCreateEntry_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCreateEntry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCreateEntry_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("fsVersion", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("entry", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCreateEntry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCreateEntry_argsTupleSchemeFactory());
    }

    public int serverID; // required
    public long fsVersion; // required
    public rso.at.FileEntryExtended entry; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "serverID"),
      FS_VERSION((short)2, "fsVersion"),
      ENTRY((short)3, "entry");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          case 2: // FS_VERSION
            return FS_VERSION;
          case 3: // ENTRY
            return ENTRY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private static final int __FSVERSION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("fsVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ENTRY, new org.apache.thrift.meta_data.FieldMetaData("entry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rso.at.FileEntryExtended.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCreateEntry_args.class, metaDataMap);
    }

    public updateCreateEntry_args() {
    }

    public updateCreateEntry_args(
      int serverID,
      long fsVersion,
      rso.at.FileEntryExtended entry)
    {
      this();
      this.serverID = serverID;
      setServerIDIsSet(true);
      this.fsVersion = fsVersion;
      setFsVersionIsSet(true);
      this.entry = entry;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCreateEntry_args(updateCreateEntry_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.serverID = other.serverID;
      this.fsVersion = other.fsVersion;
      if (other.isSetEntry()) {
        this.entry = new rso.at.FileEntryExtended(other.entry);
      }
    }

    public updateCreateEntry_args deepCopy() {
      return new updateCreateEntry_args(this);
    }

    @Override
    public void clear() {
      setServerIDIsSet(false);
      this.serverID = 0;
      setFsVersionIsSet(false);
      this.fsVersion = 0;
      this.entry = null;
    }

    public int getServerID() {
      return this.serverID;
    }

    public updateCreateEntry_args setServerID(int serverID) {
      this.serverID = serverID;
      setServerIDIsSet(true);
      return this;
    }

    public void unsetServerID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
    public boolean isSetServerID() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServerIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public long getFsVersion() {
      return this.fsVersion;
    }

    public updateCreateEntry_args setFsVersion(long fsVersion) {
      this.fsVersion = fsVersion;
      setFsVersionIsSet(true);
      return this;
    }

    public void unsetFsVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FSVERSION_ISSET_ID);
    }

    /** Returns true if field fsVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetFsVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __FSVERSION_ISSET_ID);
    }

    public void setFsVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FSVERSION_ISSET_ID, value);
    }

    public rso.at.FileEntryExtended getEntry() {
      return this.entry;
    }

    public updateCreateEntry_args setEntry(rso.at.FileEntryExtended entry) {
      this.entry = entry;
      return this;
    }

    public void unsetEntry() {
      this.entry = null;
    }

    /** Returns true if field entry is set (has been assigned a value) and false otherwise */
    public boolean isSetEntry() {
      return this.entry != null;
    }

    public void setEntryIsSet(boolean value) {
      if (!value) {
        this.entry = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServerID();
        } else {
          setServerID((Integer)value);
        }
        break;

      case FS_VERSION:
        if (value == null) {
          unsetFsVersion();
        } else {
          setFsVersion((Long)value);
        }
        break;

      case ENTRY:
        if (value == null) {
          unsetEntry();
        } else {
          setEntry((rso.at.FileEntryExtended)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Integer.valueOf(getServerID());

      case FS_VERSION:
        return Long.valueOf(getFsVersion());

      case ENTRY:
        return getEntry();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServerID();
      case FS_VERSION:
        return isSetFsVersion();
      case ENTRY:
        return isSetEntry();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCreateEntry_args)
        return this.equals((updateCreateEntry_args)that);
      return false;
    }

    public boolean equals(updateCreateEntry_args that) {
      if (that == null)
        return false;

      boolean this_present_serverID = true;
      boolean that_present_serverID = true;
      if (this_present_serverID || that_present_serverID) {
        if (!(this_present_serverID && that_present_serverID))
          return false;
        if (this.serverID != that.serverID)
          return false;
      }

      boolean this_present_fsVersion = true;
      boolean that_present_fsVersion = true;
      if (this_present_fsVersion || that_present_fsVersion) {
        if (!(this_present_fsVersion && that_present_fsVersion))
          return false;
        if (this.fsVersion != that.fsVersion)
          return false;
      }

      boolean this_present_entry = true && this.isSetEntry();
      boolean that_present_entry = true && that.isSetEntry();
      if (this_present_entry || that_present_entry) {
        if (!(this_present_entry && that_present_entry))
          return false;
        if (!this.entry.equals(that.entry))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateCreateEntry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFsVersion()).compareTo(other.isSetFsVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFsVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsVersion, other.fsVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntry()).compareTo(other.isSetEntry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntry()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry, other.entry);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCreateEntry_args(");
      boolean first = true;

      sb.append("serverID:");
      sb.append(this.serverID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fsVersion:");
      sb.append(this.fsVersion);
      first = false;
      if (!first) sb.append(", ");
      sb.append("entry:");
      if (this.entry == null) {
        sb.append("null");
      } else {
        sb.append(this.entry);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entry != null) {
        entry.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCreateEntry_argsStandardSchemeFactory implements SchemeFactory {
      public updateCreateEntry_argsStandardScheme getScheme() {
        return new updateCreateEntry_argsStandardScheme();
      }
    }

    private static class updateCreateEntry_argsStandardScheme extends StandardScheme<updateCreateEntry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCreateEntry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverID = iprot.readI32();
                struct.setServerIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FS_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fsVersion = iprot.readI64();
                struct.setFsVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENTRY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entry = new rso.at.FileEntryExtended();
                struct.entry.read(iprot);
                struct.setEntryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCreateEntry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.serverID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FS_VERSION_FIELD_DESC);
        oprot.writeI64(struct.fsVersion);
        oprot.writeFieldEnd();
        if (struct.entry != null) {
          oprot.writeFieldBegin(ENTRY_FIELD_DESC);
          struct.entry.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCreateEntry_argsTupleSchemeFactory implements SchemeFactory {
      public updateCreateEntry_argsTupleScheme getScheme() {
        return new updateCreateEntry_argsTupleScheme();
      }
    }

    private static class updateCreateEntry_argsTupleScheme extends TupleScheme<updateCreateEntry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCreateEntry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServerID()) {
          optionals.set(0);
        }
        if (struct.isSetFsVersion()) {
          optionals.set(1);
        }
        if (struct.isSetEntry()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServerID()) {
          oprot.writeI32(struct.serverID);
        }
        if (struct.isSetFsVersion()) {
          oprot.writeI64(struct.fsVersion);
        }
        if (struct.isSetEntry()) {
          struct.entry.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCreateEntry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serverID = iprot.readI32();
          struct.setServerIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fsVersion = iprot.readI64();
          struct.setFsVersionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.entry = new rso.at.FileEntryExtended();
          struct.entry.read(iprot);
          struct.setEntryIsSet(true);
        }
      }
    }

  }

  public static class updateRemoveEntry_args implements org.apache.thrift.TBase<updateRemoveEntry_args, updateRemoveEntry_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateRemoveEntry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRemoveEntry_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("fsVersion", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("entry", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRemoveEntry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRemoveEntry_argsTupleSchemeFactory());
    }

    public int serverID; // required
    public long fsVersion; // required
    public rso.at.FileEntryExtended entry; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "serverID"),
      FS_VERSION((short)2, "fsVersion"),
      ENTRY((short)3, "entry");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          case 2: // FS_VERSION
            return FS_VERSION;
          case 3: // ENTRY
            return ENTRY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private static final int __FSVERSION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("fsVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ENTRY, new org.apache.thrift.meta_data.FieldMetaData("entry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rso.at.FileEntryExtended.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRemoveEntry_args.class, metaDataMap);
    }

    public updateRemoveEntry_args() {
    }

    public updateRemoveEntry_args(
      int serverID,
      long fsVersion,
      rso.at.FileEntryExtended entry)
    {
      this();
      this.serverID = serverID;
      setServerIDIsSet(true);
      this.fsVersion = fsVersion;
      setFsVersionIsSet(true);
      this.entry = entry;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRemoveEntry_args(updateRemoveEntry_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.serverID = other.serverID;
      this.fsVersion = other.fsVersion;
      if (other.isSetEntry()) {
        this.entry = new rso.at.FileEntryExtended(other.entry);
      }
    }

    public updateRemoveEntry_args deepCopy() {
      return new updateRemoveEntry_args(this);
    }

    @Override
    public void clear() {
      setServerIDIsSet(false);
      this.serverID = 0;
      setFsVersionIsSet(false);
      this.fsVersion = 0;
      this.entry = null;
    }

    public int getServerID() {
      return this.serverID;
    }

    public updateRemoveEntry_args setServerID(int serverID) {
      this.serverID = serverID;
      setServerIDIsSet(true);
      return this;
    }

    public void unsetServerID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
    public boolean isSetServerID() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServerIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public long getFsVersion() {
      return this.fsVersion;
    }

    public updateRemoveEntry_args setFsVersion(long fsVersion) {
      this.fsVersion = fsVersion;
      setFsVersionIsSet(true);
      return this;
    }

    public void unsetFsVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FSVERSION_ISSET_ID);
    }

    /** Returns true if field fsVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetFsVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __FSVERSION_ISSET_ID);
    }

    public void setFsVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FSVERSION_ISSET_ID, value);
    }

    public rso.at.FileEntryExtended getEntry() {
      return this.entry;
    }

    public updateRemoveEntry_args setEntry(rso.at.FileEntryExtended entry) {
      this.entry = entry;
      return this;
    }

    public void unsetEntry() {
      this.entry = null;
    }

    /** Returns true if field entry is set (has been assigned a value) and false otherwise */
    public boolean isSetEntry() {
      return this.entry != null;
    }

    public void setEntryIsSet(boolean value) {
      if (!value) {
        this.entry = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServerID();
        } else {
          setServerID((Integer)value);
        }
        break;

      case FS_VERSION:
        if (value == null) {
          unsetFsVersion();
        } else {
          setFsVersion((Long)value);
        }
        break;

      case ENTRY:
        if (value == null) {
          unsetEntry();
        } else {
          setEntry((rso.at.FileEntryExtended)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Integer.valueOf(getServerID());

      case FS_VERSION:
        return Long.valueOf(getFsVersion());

      case ENTRY:
        return getEntry();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServerID();
      case FS_VERSION:
        return isSetFsVersion();
      case ENTRY:
        return isSetEntry();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRemoveEntry_args)
        return this.equals((updateRemoveEntry_args)that);
      return false;
    }

    public boolean equals(updateRemoveEntry_args that) {
      if (that == null)
        return false;

      boolean this_present_serverID = true;
      boolean that_present_serverID = true;
      if (this_present_serverID || that_present_serverID) {
        if (!(this_present_serverID && that_present_serverID))
          return false;
        if (this.serverID != that.serverID)
          return false;
      }

      boolean this_present_fsVersion = true;
      boolean that_present_fsVersion = true;
      if (this_present_fsVersion || that_present_fsVersion) {
        if (!(this_present_fsVersion && that_present_fsVersion))
          return false;
        if (this.fsVersion != that.fsVersion)
          return false;
      }

      boolean this_present_entry = true && this.isSetEntry();
      boolean that_present_entry = true && that.isSetEntry();
      if (this_present_entry || that_present_entry) {
        if (!(this_present_entry && that_present_entry))
          return false;
        if (!this.entry.equals(that.entry))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateRemoveEntry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFsVersion()).compareTo(other.isSetFsVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFsVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsVersion, other.fsVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntry()).compareTo(other.isSetEntry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntry()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry, other.entry);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRemoveEntry_args(");
      boolean first = true;

      sb.append("serverID:");
      sb.append(this.serverID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fsVersion:");
      sb.append(this.fsVersion);
      first = false;
      if (!first) sb.append(", ");
      sb.append("entry:");
      if (this.entry == null) {
        sb.append("null");
      } else {
        sb.append(this.entry);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entry != null) {
        entry.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRemoveEntry_argsStandardSchemeFactory implements SchemeFactory {
      public updateRemoveEntry_argsStandardScheme getScheme() {
        return new updateRemoveEntry_argsStandardScheme();
      }
    }

    private static class updateRemoveEntry_argsStandardScheme extends StandardScheme<updateRemoveEntry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRemoveEntry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverID = iprot.readI32();
                struct.setServerIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FS_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fsVersion = iprot.readI64();
                struct.setFsVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENTRY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entry = new rso.at.FileEntryExtended();
                struct.entry.read(iprot);
                struct.setEntryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRemoveEntry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.serverID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FS_VERSION_FIELD_DESC);
        oprot.writeI64(struct.fsVersion);
        oprot.writeFieldEnd();
        if (struct.entry != null) {
          oprot.writeFieldBegin(ENTRY_FIELD_DESC);
          struct.entry.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRemoveEntry_argsTupleSchemeFactory implements SchemeFactory {
      public updateRemoveEntry_argsTupleScheme getScheme() {
        return new updateRemoveEntry_argsTupleScheme();
      }
    }

    private static class updateRemoveEntry_argsTupleScheme extends TupleScheme<updateRemoveEntry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRemoveEntry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServerID()) {
          optionals.set(0);
        }
        if (struct.isSetFsVersion()) {
          optionals.set(1);
        }
        if (struct.isSetEntry()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServerID()) {
          oprot.writeI32(struct.serverID);
        }
        if (struct.isSetFsVersion()) {
          oprot.writeI64(struct.fsVersion);
        }
        if (struct.isSetEntry()) {
          struct.entry.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRemoveEntry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serverID = iprot.readI32();
          struct.setServerIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fsVersion = iprot.readI64();
          struct.setFsVersionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.entry = new rso.at.FileEntryExtended();
          struct.entry.read(iprot);
          struct.setEntryIsSet(true);
        }
      }
    }

  }

  public static class updateMoveEntry_args implements org.apache.thrift.TBase<updateMoveEntry_args, updateMoveEntry_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMoveEntry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMoveEntry_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("fsVersion", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField OLD_ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("oldEntry", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField NEW_ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("newEntry", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMoveEntry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMoveEntry_argsTupleSchemeFactory());
    }

    public int serverID; // required
    public long fsVersion; // required
    public rso.at.FileEntryExtended oldEntry; // required
    public rso.at.FileEntryExtended newEntry; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "serverID"),
      FS_VERSION((short)2, "fsVersion"),
      OLD_ENTRY((short)3, "oldEntry"),
      NEW_ENTRY((short)4, "newEntry");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          case 2: // FS_VERSION
            return FS_VERSION;
          case 3: // OLD_ENTRY
            return OLD_ENTRY;
          case 4: // NEW_ENTRY
            return NEW_ENTRY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private static final int __FSVERSION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("fsVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OLD_ENTRY, new org.apache.thrift.meta_data.FieldMetaData("oldEntry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rso.at.FileEntryExtended.class)));
      tmpMap.put(_Fields.NEW_ENTRY, new org.apache.thrift.meta_data.FieldMetaData("newEntry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rso.at.FileEntryExtended.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMoveEntry_args.class, metaDataMap);
    }

    public updateMoveEntry_args() {
    }

    public updateMoveEntry_args(
      int serverID,
      long fsVersion,
      rso.at.FileEntryExtended oldEntry,
      rso.at.FileEntryExtended newEntry)
    {
      this();
      this.serverID = serverID;
      setServerIDIsSet(true);
      this.fsVersion = fsVersion;
      setFsVersionIsSet(true);
      this.oldEntry = oldEntry;
      this.newEntry = newEntry;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMoveEntry_args(updateMoveEntry_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.serverID = other.serverID;
      this.fsVersion = other.fsVersion;
      if (other.isSetOldEntry()) {
        this.oldEntry = new rso.at.FileEntryExtended(other.oldEntry);
      }
      if (other.isSetNewEntry()) {
        this.newEntry = new rso.at.FileEntryExtended(other.newEntry);
      }
    }

    public updateMoveEntry_args deepCopy() {
      return new updateMoveEntry_args(this);
    }

    @Override
    public void clear() {
      setServerIDIsSet(false);
      this.serverID = 0;
      setFsVersionIsSet(false);
      this.fsVersion = 0;
      this.oldEntry = null;
      this.newEntry = null;
    }

    public int getServerID() {
      return this.serverID;
    }

    public updateMoveEntry_args setServerID(int serverID) {
      this.serverID = serverID;
      setServerIDIsSet(true);
      return this;
    }

    public void unsetServerID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
    public boolean isSetServerID() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServerIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public long getFsVersion() {
      return this.fsVersion;
    }

    public updateMoveEntry_args setFsVersion(long fsVersion) {
      this.fsVersion = fsVersion;
      setFsVersionIsSet(true);
      return this;
    }

    public void unsetFsVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FSVERSION_ISSET_ID);
    }

    /** Returns true if field fsVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetFsVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __FSVERSION_ISSET_ID);
    }

    public void setFsVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FSVERSION_ISSET_ID, value);
    }

    public rso.at.FileEntryExtended getOldEntry() {
      return this.oldEntry;
    }

    public updateMoveEntry_args setOldEntry(rso.at.FileEntryExtended oldEntry) {
      this.oldEntry = oldEntry;
      return this;
    }

    public void unsetOldEntry() {
      this.oldEntry = null;
    }

    /** Returns true if field oldEntry is set (has been assigned a value) and false otherwise */
    public boolean isSetOldEntry() {
      return this.oldEntry != null;
    }

    public void setOldEntryIsSet(boolean value) {
      if (!value) {
        this.oldEntry = null;
      }
    }

    public rso.at.FileEntryExtended getNewEntry() {
      return this.newEntry;
    }

    public updateMoveEntry_args setNewEntry(rso.at.FileEntryExtended newEntry) {
      this.newEntry = newEntry;
      return this;
    }

    public void unsetNewEntry() {
      this.newEntry = null;
    }

    /** Returns true if field newEntry is set (has been assigned a value) and false otherwise */
    public boolean isSetNewEntry() {
      return this.newEntry != null;
    }

    public void setNewEntryIsSet(boolean value) {
      if (!value) {
        this.newEntry = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServerID();
        } else {
          setServerID((Integer)value);
        }
        break;

      case FS_VERSION:
        if (value == null) {
          unsetFsVersion();
        } else {
          setFsVersion((Long)value);
        }
        break;

      case OLD_ENTRY:
        if (value == null) {
          unsetOldEntry();
        } else {
          setOldEntry((rso.at.FileEntryExtended)value);
        }
        break;

      case NEW_ENTRY:
        if (value == null) {
          unsetNewEntry();
        } else {
          setNewEntry((rso.at.FileEntryExtended)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Integer.valueOf(getServerID());

      case FS_VERSION:
        return Long.valueOf(getFsVersion());

      case OLD_ENTRY:
        return getOldEntry();

      case NEW_ENTRY:
        return getNewEntry();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServerID();
      case FS_VERSION:
        return isSetFsVersion();
      case OLD_ENTRY:
        return isSetOldEntry();
      case NEW_ENTRY:
        return isSetNewEntry();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMoveEntry_args)
        return this.equals((updateMoveEntry_args)that);
      return false;
    }

    public boolean equals(updateMoveEntry_args that) {
      if (that == null)
        return false;

      boolean this_present_serverID = true;
      boolean that_present_serverID = true;
      if (this_present_serverID || that_present_serverID) {
        if (!(this_present_serverID && that_present_serverID))
          return false;
        if (this.serverID != that.serverID)
          return false;
      }

      boolean this_present_fsVersion = true;
      boolean that_present_fsVersion = true;
      if (this_present_fsVersion || that_present_fsVersion) {
        if (!(this_present_fsVersion && that_present_fsVersion))
          return false;
        if (this.fsVersion != that.fsVersion)
          return false;
      }

      boolean this_present_oldEntry = true && this.isSetOldEntry();
      boolean that_present_oldEntry = true && that.isSetOldEntry();
      if (this_present_oldEntry || that_present_oldEntry) {
        if (!(this_present_oldEntry && that_present_oldEntry))
          return false;
        if (!this.oldEntry.equals(that.oldEntry))
          return false;
      }

      boolean this_present_newEntry = true && this.isSetNewEntry();
      boolean that_present_newEntry = true && that.isSetNewEntry();
      if (this_present_newEntry || that_present_newEntry) {
        if (!(this_present_newEntry && that_present_newEntry))
          return false;
        if (!this.newEntry.equals(that.newEntry))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateMoveEntry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFsVersion()).compareTo(other.isSetFsVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFsVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsVersion, other.fsVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldEntry()).compareTo(other.isSetOldEntry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldEntry()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldEntry, other.oldEntry);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewEntry()).compareTo(other.isSetNewEntry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewEntry()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newEntry, other.newEntry);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMoveEntry_args(");
      boolean first = true;

      sb.append("serverID:");
      sb.append(this.serverID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fsVersion:");
      sb.append(this.fsVersion);
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldEntry:");
      if (this.oldEntry == null) {
        sb.append("null");
      } else {
        sb.append(this.oldEntry);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newEntry:");
      if (this.newEntry == null) {
        sb.append("null");
      } else {
        sb.append(this.newEntry);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (oldEntry != null) {
        oldEntry.validate();
      }
      if (newEntry != null) {
        newEntry.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMoveEntry_argsStandardSchemeFactory implements SchemeFactory {
      public updateMoveEntry_argsStandardScheme getScheme() {
        return new updateMoveEntry_argsStandardScheme();
      }
    }

    private static class updateMoveEntry_argsStandardScheme extends StandardScheme<updateMoveEntry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMoveEntry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverID = iprot.readI32();
                struct.setServerIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FS_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fsVersion = iprot.readI64();
                struct.setFsVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OLD_ENTRY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oldEntry = new rso.at.FileEntryExtended();
                struct.oldEntry.read(iprot);
                struct.setOldEntryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NEW_ENTRY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.newEntry = new rso.at.FileEntryExtended();
                struct.newEntry.read(iprot);
                struct.setNewEntryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMoveEntry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.serverID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FS_VERSION_FIELD_DESC);
        oprot.writeI64(struct.fsVersion);
        oprot.writeFieldEnd();
        if (struct.oldEntry != null) {
          oprot.writeFieldBegin(OLD_ENTRY_FIELD_DESC);
          struct.oldEntry.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.newEntry != null) {
          oprot.writeFieldBegin(NEW_ENTRY_FIELD_DESC);
          struct.newEntry.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMoveEntry_argsTupleSchemeFactory implements SchemeFactory {
      public updateMoveEntry_argsTupleScheme getScheme() {
        return new updateMoveEntry_argsTupleScheme();
      }
    }

    private static class updateMoveEntry_argsTupleScheme extends TupleScheme<updateMoveEntry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMoveEntry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServerID()) {
          optionals.set(0);
        }
        if (struct.isSetFsVersion()) {
          optionals.set(1);
        }
        if (struct.isSetOldEntry()) {
          optionals.set(2);
        }
        if (struct.isSetNewEntry()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetServerID()) {
          oprot.writeI32(struct.serverID);
        }
        if (struct.isSetFsVersion()) {
          oprot.writeI64(struct.fsVersion);
        }
        if (struct.isSetOldEntry()) {
          struct.oldEntry.write(oprot);
        }
        if (struct.isSetNewEntry()) {
          struct.newEntry.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMoveEntry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.serverID = iprot.readI32();
          struct.setServerIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fsVersion = iprot.readI64();
          struct.setFsVersionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.oldEntry = new rso.at.FileEntryExtended();
          struct.oldEntry.read(iprot);
          struct.setOldEntryIsSet(true);
        }
        if (incoming.get(3)) {
          struct.newEntry = new rso.at.FileEntryExtended();
          struct.newEntry.read(iprot);
          struct.setNewEntryIsSet(true);
        }
      }
    }

  }

  public static class getFileSystemSnapshot_args implements org.apache.thrift.TBase<getFileSystemSnapshot_args, getFileSystemSnapshot_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFileSystemSnapshot_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileSystemSnapshot_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFileSystemSnapshot_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFileSystemSnapshot_argsTupleSchemeFactory());
    }

    public int serverID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "serverID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileSystemSnapshot_args.class, metaDataMap);
    }

    public getFileSystemSnapshot_args() {
    }

    public getFileSystemSnapshot_args(
      int serverID)
    {
      this();
      this.serverID = serverID;
      setServerIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFileSystemSnapshot_args(getFileSystemSnapshot_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.serverID = other.serverID;
    }

    public getFileSystemSnapshot_args deepCopy() {
      return new getFileSystemSnapshot_args(this);
    }

    @Override
    public void clear() {
      setServerIDIsSet(false);
      this.serverID = 0;
    }

    public int getServerID() {
      return this.serverID;
    }

    public getFileSystemSnapshot_args setServerID(int serverID) {
      this.serverID = serverID;
      setServerIDIsSet(true);
      return this;
    }

    public void unsetServerID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
    public boolean isSetServerID() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServerIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServerID();
        } else {
          setServerID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Integer.valueOf(getServerID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServerID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFileSystemSnapshot_args)
        return this.equals((getFileSystemSnapshot_args)that);
      return false;
    }

    public boolean equals(getFileSystemSnapshot_args that) {
      if (that == null)
        return false;

      boolean this_present_serverID = true;
      boolean that_present_serverID = true;
      if (this_present_serverID || that_present_serverID) {
        if (!(this_present_serverID && that_present_serverID))
          return false;
        if (this.serverID != that.serverID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFileSystemSnapshot_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFileSystemSnapshot_args(");
      boolean first = true;

      sb.append("serverID:");
      sb.append(this.serverID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFileSystemSnapshot_argsStandardSchemeFactory implements SchemeFactory {
      public getFileSystemSnapshot_argsStandardScheme getScheme() {
        return new getFileSystemSnapshot_argsStandardScheme();
      }
    }

    private static class getFileSystemSnapshot_argsStandardScheme extends StandardScheme<getFileSystemSnapshot_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFileSystemSnapshot_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverID = iprot.readI32();
                struct.setServerIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFileSystemSnapshot_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.serverID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFileSystemSnapshot_argsTupleSchemeFactory implements SchemeFactory {
      public getFileSystemSnapshot_argsTupleScheme getScheme() {
        return new getFileSystemSnapshot_argsTupleScheme();
      }
    }

    private static class getFileSystemSnapshot_argsTupleScheme extends TupleScheme<getFileSystemSnapshot_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFileSystemSnapshot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServerID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetServerID()) {
          oprot.writeI32(struct.serverID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFileSystemSnapshot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.serverID = iprot.readI32();
          struct.setServerIDIsSet(true);
        }
      }
    }

  }

  public static class getFileSystemSnapshot_result implements org.apache.thrift.TBase<getFileSystemSnapshot_result, getFileSystemSnapshot_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFileSystemSnapshot_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileSystemSnapshot_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFileSystemSnapshot_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFileSystemSnapshot_resultTupleSchemeFactory());
    }

    public rso.at.FileSystemSnapshot success; // required
    public rso.at.HostNotPermitted err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rso.at.FileSystemSnapshot.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileSystemSnapshot_result.class, metaDataMap);
    }

    public getFileSystemSnapshot_result() {
    }

    public getFileSystemSnapshot_result(
      rso.at.FileSystemSnapshot success,
      rso.at.HostNotPermitted err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFileSystemSnapshot_result(getFileSystemSnapshot_result other) {
      if (other.isSetSuccess()) {
        this.success = new rso.at.FileSystemSnapshot(other.success);
      }
      if (other.isSetErr()) {
        this.err = new rso.at.HostNotPermitted(other.err);
      }
    }

    public getFileSystemSnapshot_result deepCopy() {
      return new getFileSystemSnapshot_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public rso.at.FileSystemSnapshot getSuccess() {
      return this.success;
    }

    public getFileSystemSnapshot_result setSuccess(rso.at.FileSystemSnapshot success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public rso.at.HostNotPermitted getErr() {
      return this.err;
    }

    public getFileSystemSnapshot_result setErr(rso.at.HostNotPermitted err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((rso.at.FileSystemSnapshot)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((rso.at.HostNotPermitted)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFileSystemSnapshot_result)
        return this.equals((getFileSystemSnapshot_result)that);
      return false;
    }

    public boolean equals(getFileSystemSnapshot_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFileSystemSnapshot_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFileSystemSnapshot_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFileSystemSnapshot_resultStandardSchemeFactory implements SchemeFactory {
      public getFileSystemSnapshot_resultStandardScheme getScheme() {
        return new getFileSystemSnapshot_resultStandardScheme();
      }
    }

    private static class getFileSystemSnapshot_resultStandardScheme extends StandardScheme<getFileSystemSnapshot_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFileSystemSnapshot_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new rso.at.FileSystemSnapshot();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new rso.at.HostNotPermitted();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFileSystemSnapshot_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFileSystemSnapshot_resultTupleSchemeFactory implements SchemeFactory {
      public getFileSystemSnapshot_resultTupleScheme getScheme() {
        return new getFileSystemSnapshot_resultTupleScheme();
      }
    }

    private static class getFileSystemSnapshot_resultTupleScheme extends TupleScheme<getFileSystemSnapshot_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFileSystemSnapshot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFileSystemSnapshot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new rso.at.FileSystemSnapshot();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new rso.at.HostNotPermitted();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class election_args implements org.apache.thrift.TBase<election_args, election_args._Fields>, java.io.Serializable, Cloneable, Comparable<election_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("election_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new election_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new election_argsTupleSchemeFactory());
    }

    public int serverID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "serverID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(election_args.class, metaDataMap);
    }

    public election_args() {
    }

    public election_args(
      int serverID)
    {
      this();
      this.serverID = serverID;
      setServerIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public election_args(election_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.serverID = other.serverID;
    }

    public election_args deepCopy() {
      return new election_args(this);
    }

    @Override
    public void clear() {
      setServerIDIsSet(false);
      this.serverID = 0;
    }

    public int getServerID() {
      return this.serverID;
    }

    public election_args setServerID(int serverID) {
      this.serverID = serverID;
      setServerIDIsSet(true);
      return this;
    }

    public void unsetServerID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
    public boolean isSetServerID() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServerIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServerID();
        } else {
          setServerID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Integer.valueOf(getServerID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServerID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof election_args)
        return this.equals((election_args)that);
      return false;
    }

    public boolean equals(election_args that) {
      if (that == null)
        return false;

      boolean this_present_serverID = true;
      boolean that_present_serverID = true;
      if (this_present_serverID || that_present_serverID) {
        if (!(this_present_serverID && that_present_serverID))
          return false;
        if (this.serverID != that.serverID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(election_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("election_args(");
      boolean first = true;

      sb.append("serverID:");
      sb.append(this.serverID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class election_argsStandardSchemeFactory implements SchemeFactory {
      public election_argsStandardScheme getScheme() {
        return new election_argsStandardScheme();
      }
    }

    private static class election_argsStandardScheme extends StandardScheme<election_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, election_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverID = iprot.readI32();
                struct.setServerIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, election_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.serverID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class election_argsTupleSchemeFactory implements SchemeFactory {
      public election_argsTupleScheme getScheme() {
        return new election_argsTupleScheme();
      }
    }

    private static class election_argsTupleScheme extends TupleScheme<election_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, election_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServerID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetServerID()) {
          oprot.writeI32(struct.serverID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, election_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.serverID = iprot.readI32();
          struct.setServerIDIsSet(true);
        }
      }
    }

  }

  public static class election_result implements org.apache.thrift.TBase<election_result, election_result._Fields>, java.io.Serializable, Cloneable, Comparable<election_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("election_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new election_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new election_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(election_result.class, metaDataMap);
    }

    public election_result() {
    }

    public election_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public election_result(election_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public election_result deepCopy() {
      return new election_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public election_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof election_result)
        return this.equals((election_result)that);
      return false;
    }

    public boolean equals(election_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(election_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("election_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class election_resultStandardSchemeFactory implements SchemeFactory {
      public election_resultStandardScheme getScheme() {
        return new election_resultStandardScheme();
      }
    }

    private static class election_resultStandardScheme extends StandardScheme<election_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, election_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, election_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class election_resultTupleSchemeFactory implements SchemeFactory {
      public election_resultTupleScheme getScheme() {
        return new election_resultTupleScheme();
      }
    }

    private static class election_resultTupleScheme extends TupleScheme<election_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, election_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, election_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class elected_args implements org.apache.thrift.TBase<elected_args, elected_args._Fields>, java.io.Serializable, Cloneable, Comparable<elected_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("elected_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new elected_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new elected_argsTupleSchemeFactory());
    }

    public int serverID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "serverID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(elected_args.class, metaDataMap);
    }

    public elected_args() {
    }

    public elected_args(
      int serverID)
    {
      this();
      this.serverID = serverID;
      setServerIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public elected_args(elected_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.serverID = other.serverID;
    }

    public elected_args deepCopy() {
      return new elected_args(this);
    }

    @Override
    public void clear() {
      setServerIDIsSet(false);
      this.serverID = 0;
    }

    public int getServerID() {
      return this.serverID;
    }

    public elected_args setServerID(int serverID) {
      this.serverID = serverID;
      setServerIDIsSet(true);
      return this;
    }

    public void unsetServerID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
    public boolean isSetServerID() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServerIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServerID();
        } else {
          setServerID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Integer.valueOf(getServerID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServerID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof elected_args)
        return this.equals((elected_args)that);
      return false;
    }

    public boolean equals(elected_args that) {
      if (that == null)
        return false;

      boolean this_present_serverID = true;
      boolean that_present_serverID = true;
      if (this_present_serverID || that_present_serverID) {
        if (!(this_present_serverID && that_present_serverID))
          return false;
        if (this.serverID != that.serverID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(elected_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("elected_args(");
      boolean first = true;

      sb.append("serverID:");
      sb.append(this.serverID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class elected_argsStandardSchemeFactory implements SchemeFactory {
      public elected_argsStandardScheme getScheme() {
        return new elected_argsStandardScheme();
      }
    }

    private static class elected_argsStandardScheme extends StandardScheme<elected_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, elected_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverID = iprot.readI32();
                struct.setServerIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, elected_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.serverID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class elected_argsTupleSchemeFactory implements SchemeFactory {
      public elected_argsTupleScheme getScheme() {
        return new elected_argsTupleScheme();
      }
    }

    private static class elected_argsTupleScheme extends TupleScheme<elected_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, elected_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServerID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetServerID()) {
          oprot.writeI32(struct.serverID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, elected_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.serverID = iprot.readI32();
          struct.setServerIDIsSet(true);
        }
      }
    }

  }

  public static class elected_result implements org.apache.thrift.TBase<elected_result, elected_result._Fields>, java.io.Serializable, Cloneable, Comparable<elected_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("elected_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new elected_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new elected_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(elected_result.class, metaDataMap);
    }

    public elected_result() {
    }

    public elected_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public elected_result(elected_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public elected_result deepCopy() {
      return new elected_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public elected_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof elected_result)
        return this.equals((elected_result)that);
      return false;
    }

    public boolean equals(elected_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(elected_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("elected_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class elected_resultStandardSchemeFactory implements SchemeFactory {
      public elected_resultStandardScheme getScheme() {
        return new elected_resultStandardScheme();
      }
    }

    private static class elected_resultStandardScheme extends StandardScheme<elected_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, elected_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, elected_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class elected_resultTupleSchemeFactory implements SchemeFactory {
      public elected_resultTupleScheme getScheme() {
        return new elected_resultTupleScheme();
      }
    }

    private static class elected_resultTupleScheme extends TupleScheme<elected_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, elected_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, elected_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
