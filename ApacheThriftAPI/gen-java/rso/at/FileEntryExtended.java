/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rso.at;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FileEntryExtended implements org.apache.thrift.TBase<FileEntryExtended, FileEntryExtended._Fields>, java.io.Serializable, Cloneable, Comparable<FileEntryExtended> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileEntryExtended");

  private static final org.apache.thrift.protocol.TField ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("entry", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MIRRORS_FIELD_DESC = new org.apache.thrift.protocol.TField("mirrors", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FileEntryExtendedStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FileEntryExtendedTupleSchemeFactory());
  }

  public FileEntry entry; // required
  public List<Integer> mirrors; // required
  /**
   * 
   * @see FileState
   */
  public FileState state; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ENTRY((short)1, "entry"),
    MIRRORS((short)2, "mirrors"),
    /**
     * 
     * @see FileState
     */
    STATE((short)3, "state");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENTRY
          return ENTRY;
        case 2: // MIRRORS
          return MIRRORS;
        case 3: // STATE
          return STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENTRY, new org.apache.thrift.meta_data.FieldMetaData("entry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileEntry.class)));
    tmpMap.put(_Fields.MIRRORS, new org.apache.thrift.meta_data.FieldMetaData("mirrors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FileState.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileEntryExtended.class, metaDataMap);
  }

  public FileEntryExtended() {
	  entry = new FileEntry();
  }

  public FileEntryExtended(
    FileEntry entry,
    List<Integer> mirrors,
    FileState state)
  {
    this();
    this.entry = entry;
    this.mirrors = mirrors;
    this.state = state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileEntryExtended(FileEntryExtended other) {
    if (other.isSetEntry()) {
      this.entry = new FileEntry(other.entry);
    }
    if (other.isSetMirrors()) {
      List<Integer> __this__mirrors = new ArrayList<Integer>(other.mirrors);
      this.mirrors = __this__mirrors;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
  }

  public FileEntryExtended deepCopy() {
    return new FileEntryExtended(this);
  }

  @Override
  public void clear() {
    this.entry = null;
    this.mirrors = null;
    this.state = null;
  }

  public FileEntry getEntry() {
    return this.entry;
  }

  public FileEntryExtended setEntry(FileEntry entry) {
    this.entry = entry;
    return this;
  }

  public void unsetEntry() {
    this.entry = null;
  }

  /** Returns true if field entry is set (has been assigned a value) and false otherwise */
  public boolean isSetEntry() {
    return this.entry != null;
  }

  public void setEntryIsSet(boolean value) {
    if (!value) {
      this.entry = null;
    }
  }

  public int getMirrorsSize() {
    return (this.mirrors == null) ? 0 : this.mirrors.size();
  }

  public java.util.Iterator<Integer> getMirrorsIterator() {
    return (this.mirrors == null) ? null : this.mirrors.iterator();
  }

  public void addToMirrors(int elem) {
    if (this.mirrors == null) {
      this.mirrors = new ArrayList<Integer>();
    }
    this.mirrors.add(elem);
  }

  public List<Integer> getMirrors() {
    return this.mirrors;
  }

  public FileEntryExtended setMirrors(List<Integer> mirrors) {
    this.mirrors = mirrors;
    return this;
  }

  public void unsetMirrors() {
    this.mirrors = null;
  }

  /** Returns true if field mirrors is set (has been assigned a value) and false otherwise */
  public boolean isSetMirrors() {
    return this.mirrors != null;
  }

  public void setMirrorsIsSet(boolean value) {
    if (!value) {
      this.mirrors = null;
    }
  }

  /**
   * 
   * @see FileState
   */
  public FileState getState() {
    return this.state;
  }

  /**
   * 
   * @see FileState
   */
  public FileEntryExtended setState(FileState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ENTRY:
      if (value == null) {
        unsetEntry();
      } else {
        setEntry((FileEntry)value);
      }
      break;

    case MIRRORS:
      if (value == null) {
        unsetMirrors();
      } else {
        setMirrors((List<Integer>)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((FileState)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ENTRY:
      return getEntry();

    case MIRRORS:
      return getMirrors();

    case STATE:
      return getState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ENTRY:
      return isSetEntry();
    case MIRRORS:
      return isSetMirrors();
    case STATE:
      return isSetState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileEntryExtended)
      return this.equals((FileEntryExtended)that);
    return false;
  }

  public boolean equals(FileEntryExtended that) {
    if (that == null)
      return false;

    boolean this_present_entry = true && this.isSetEntry();
    boolean that_present_entry = true && that.isSetEntry();
    if (this_present_entry || that_present_entry) {
      if (!(this_present_entry && that_present_entry))
        return false;
      if (!this.entry.equals(that.entry))
        return false;
    }

    boolean this_present_mirrors = true && this.isSetMirrors();
    boolean that_present_mirrors = true && that.isSetMirrors();
    if (this_present_mirrors || that_present_mirrors) {
      if (!(this_present_mirrors && that_present_mirrors))
        return false;
      if (!this.mirrors.equals(that.mirrors))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(FileEntryExtended other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEntry()).compareTo(other.isSetEntry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry, other.entry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMirrors()).compareTo(other.isSetMirrors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMirrors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mirrors, other.mirrors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileEntryExtended(");
    boolean first = true;

    sb.append("entry:");
    if (this.entry == null) {
      sb.append("null");
    } else {
      sb.append(this.entry);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mirrors:");
    if (this.mirrors == null) {
      sb.append("null");
    } else {
      sb.append(this.mirrors);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (entry != null) {
      entry.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileEntryExtendedStandardSchemeFactory implements SchemeFactory {
    public FileEntryExtendedStandardScheme getScheme() {
      return new FileEntryExtendedStandardScheme();
    }
  }

  private static class FileEntryExtendedStandardScheme extends StandardScheme<FileEntryExtended> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileEntryExtended struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.entry = new FileEntry();
              struct.entry.read(iprot);
              struct.setEntryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MIRRORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.mirrors = new ArrayList<Integer>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  int _elem2;
                  _elem2 = iprot.readI32();
                  struct.mirrors.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setMirrorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = FileState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileEntryExtended struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.entry != null) {
        oprot.writeFieldBegin(ENTRY_FIELD_DESC);
        struct.entry.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.mirrors != null) {
        oprot.writeFieldBegin(MIRRORS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.mirrors.size()));
          for (int _iter3 : struct.mirrors)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileEntryExtendedTupleSchemeFactory implements SchemeFactory {
    public FileEntryExtendedTupleScheme getScheme() {
      return new FileEntryExtendedTupleScheme();
    }
  }

  private static class FileEntryExtendedTupleScheme extends TupleScheme<FileEntryExtended> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileEntryExtended struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEntry()) {
        optionals.set(0);
      }
      if (struct.isSetMirrors()) {
        optionals.set(1);
      }
      if (struct.isSetState()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetEntry()) {
        struct.entry.write(oprot);
      }
      if (struct.isSetMirrors()) {
        {
          oprot.writeI32(struct.mirrors.size());
          for (int _iter4 : struct.mirrors)
          {
            oprot.writeI32(_iter4);
          }
        }
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileEntryExtended struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.entry = new FileEntry();
        struct.entry.read(iprot);
        struct.setEntryIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.mirrors = new ArrayList<Integer>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            int _elem7;
            _elem7 = iprot.readI32();
            struct.mirrors.add(_elem7);
          }
        }
        struct.setMirrorsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.state = FileState.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
    }
  }

}

